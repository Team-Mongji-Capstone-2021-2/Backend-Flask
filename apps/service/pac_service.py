import pandas as pd
import matplotlib.pyplot as plt
import numpy as np
import xml.etree.ElementTree as ET
import peakutils
from xml.etree.ElementTree import Element, dump, ElementTree
from collections import Counter 
import boto3
import os
from PIL import Image
from datetime import datetime

from flask_login import current_user
from apps.database.models import Datainfo, User

bucket_name = 'capstone-heartbeat-s3'

lead1 = [-12,-12,-12,-12,-12,-12,-12,-12,-12,-12,-12,-12,-12,-12,-12,-12,-12,-12,-12,-12,-14,-14,-14,-14,-14,-14,-14,-14,-14,-14,-14,-14,-14,-14,-14,-14,-14,-14,-14,-14,-16,-16,-16,-16,-16,-16,-16,-16,-16,-16,-16,-15,-15,-15,-15,-15,-15,-14,-14,-13,-15,-15,-13,-13,-13,-13,-13,-13,-13,-13,-12,-12,-12,-11,-10,-10,-10,-10,-10,-10,-10,-10,-9,-9,-9,-7,-6,-5,-5,-5,-5,-5,-5,-5,-6,-7,-8,-9,-12,-16,-17,-19,-19,-19,-19,-19,-19,-18,-20,-20,-20,-20,-21,-21,-22,-22,-20,-20,-21,-21,-23,-23,-23,-23,-23,-23,-23,-23,-23,-23,-23,-27,-27,-26,-29,-31,-27,-23,-17,-9,8,27,46,64,83,91,93,89,80,69,58,47,32,13,-11,-33,-46,-50,-47,-47,-44,-41,-38,-34,-32,-29,-26,-26,-26,-25,-27,-25,-26,-26,-26,-26,-28,-27,-27,-27,-25,-25,-25,-25,-25,-25,-25,-24,-24,-23,-23,-23,-21,-21,-21,-21,-22,-22,-22,-22,-20,-20,-20,-20,-20,-20,-20,-20,-19,-19,-19,-19,-17,-17,-17,-16,-16,-16,-16,-16,-16,-15,-15,-15,-16,-16,-16,-16,-16,-16,-15,-15,-15,-14,-14,-14,-15,-15,-14,-14,-14,-13,-13,-13,-12,-10,-10,-10,-9,-9,-7,-7,-7,-7,-5,-4,-3,-2,-2,-1,0,1,2,4,7,8,8,10,11,12,14,16,17,18,19,20,19,21,22,23,24,24,25,25,27,27,27,28,28,28,26,25,22,21,20,19,18,16,14,12,10,7,3,2,0,-2,-3,-4,-6,-8,-10,-11,-12,-13,-14,-15,-17,-17,-18,-20,-18,-19,-20,-20,-20,-20,-20,-20,-20,-21,-21,-21,-23,-23,-23,-23,-23,-23,-23,-23,-23,-23,-24,-24,-22,-22,-22,-22,-24,-24,-24,-24,-22,-22,-22,-22,-24,-24,-24,-24,-24,-24,-25,-25,-25,-25,-25,-25,-25,-25,-25,-26,-24,-24,-24,-24,-26,-26,-26,-27,-27,-26,-26,-26,-26,-26,-26,-26,-26,-26,-26,-26,-26,-26,-26,-26,-26,-26,-25,-25,-25,-25,-25,-25,-25,-25,-25,-25,-23,-23,-23,-23,-23,-23,-23,-23,-23,-23,-23,-23,-23,-23,-23,-23,-23,-23,-23,-23,-22,-22,-21,-21,-21,-21,-21,-21,-21,-21,-20,-20,-20,-20,-19,-19,-20,-20,-20,-20,-20,-20,-20,-20,-20,-20,-20,-20,-20,-20,-20,-20,-20,-20,-20,-19,-19,-19,-19,-19,-18,-18,-18,-19,-19,-19,-18,-18,-19,-19,-19,-19,-19,-19,-18,-18,-18,-18,-18,-18,-18,-17,-17,-17,-17,-18,-18,-18,-17,-17,-17,-17,-17,-17,-17,-17,-17,-17,-18,-18,-17,-17,-16,-18,-18,-18,-18,-18,-18,-18,-18,-16,-16,-16,-16,-16,-16,-16,-16,-16,-16,-16,-16,-16,-16,-16,-16,-16,-16,-16,-16,-16,-16,-16,-16,-16,-15,-15,-15,-13,-13,-13,-12,-14,-13,-13,-13,-11,-11,-11,-11,-9,-9,-9,-9,-10,-10,-10,-9,-6,-6,-6,-6,-6,-6,-6,-6,-3,-3,-3,-1,0,1,1,1,1,1,1,1,0,-1,-2,-3,-4,-8,-9,-11,-13,-13,-13,-13,-13,-12,-12,-12,-12,-12,-13,-13,-14,-14,-14,-14,-15,-15,-15,-15,-15,-15,-15,-15,-13,-13,-13,-13,-15,-15,-15,-18,-19,-19,-15,-9,-3,7,24,41,58,80,97,105,107,101,90,77,68,57,42,21,-5,-29,-40,-40,-39,-35,-34,-31,-24,-20,-18,-15,-12,-12,-12,-13,-11,-11,-12,-12,-12,-12,-12,-11,-11,-11,-11,-11,-11,-11,-11,-11,-11,-10,-12,-11,-11,-11,-11,-11,-11,-11,-10,-10,-10,-10,-10,-10,-10,-10,-10,-10,-10,-10,-11,-11,-11,-11,-9,-9,-9,-8,-8,-8,-8,-8,-10,-9,-9,-9,-8,-8,-8,-8,-8,-8,-7,-7,-7,-6,-6,-6,-5,-5,-4,-4,-2,-1,-1,-1,-2,0,0,0,3,3,5,5,5,5,7,8,9,10,10,11,12,13,14,16,19,20,20,22,23,24,26,28,27,28,29,30,31,33,34,35,36,36,37,37,37,37,37,38,38,38,36,35,34,33,32,31,28,26,24,22,20,17,13,12,10,8,7,6,6,4,2,1,0,-1,-2,-3,-3,-3,-4,-6,-6,-7,-8,-8,-8,-8,-8,-8,-8,-9,-9,-9,-9,-9,-9,-9,-9,-9,-9,-9,-9,-9,-10,-10,-10,-10,-10,-10,-10,-10,-10,-10,-10,-10,-10,-10,-10,-10,-10,-10,-10,-10,-11,-11,-11,-11,-11,-11,-9,-9,-9,-10,-10,-10,-10,-10,-10,-10,-10,-11,-11,-10,-10,-10,-10,-10,-10,-10,-8,-8,-8,-8,-8,-8,-8,-8,-6,-6,-5,-5,-5,-5,-5,-5,-5,-5,-5,-5,-5,-5,-5,-5,-5,-5,-5,-5,-5,-5,-5,-5,-5,-5,-5,-5,-7,-7,-7,-7,-8,-8,-7,-7,-7,-7,-7,-7,-7,-7,-6,-6,-6,-6,-5,-5,-6,-6,-6,-6,-4,-4,-4,-4,-6,-6,-6,-6,-4,-4,-4,-4,-4,-4,-4,-3,-1,-1,-1,-1,-2,-2,-2,-3,-3,-3,-2,-2,-1,-1,-1,-1,-1,-1,0,0,0,0,0,0,-2,-1,-1,-1,1,0,0,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-2,-2,-4,-4,-4,-4,-4,-4,-3,-3,-3,-3,-3,-3,-2,-2,-1,-1,-1,1,1,1,1,1,1,1,1,2,2,2,3,4,4,4,4,4,4,4,4,5,5,5,7,8,9,9,9,9,9,9,11,10,9,8,7,4,0,-1,-3,-3,-3,-3,-3,-3,-2,-2,-4,-4,-4,-5,-5,-6,-6,-6,-6,-7,-7,-7,-9,-9,-9,-9,-9,-11,-11,-11,-13,-13,-13,-13,-16,-19,-19,-19,-17,-13,-5,8,23,38,52,65,77,79,73,62,49,40,31,20,1,-21,-41,-52,-54,-49,-47,-46,-43,-40,-36,-32,-29,-26,-24,-22,-23,-25,-23,-22,-22,-22,-22,-22,-21,-21,-21,-19,-19,-19,-19,-19,-19,-19,-18,-18,-17,-17,-17,-17,-17,-17,-17,-16,-16,-16,-16,-16,-16,-16,-16,-14,-14,-14,-14,-13,-13,-13,-13,-13,-13,-13,-12,-12,-12,-12,-12,-12,-11,-11,-11,-10,-10,-10,-10,-8,-8,-7,-7,-7,-6,-6,-6,-5,-5,-4,-4,-4,-3,-3,-3,-4,-2,-2,-2,-1,-1,1,1,3,3,5,6,5,6,6,7,8,9,10,12,13,14,14,16,17,18,20,22,21,22,23,24,23,25,26,27,28,28,29,29,29,29,29,30,30,30,28,27,24,23,22,21,18,16,14,12,12,9,5,4,0,-2,-3,-4,-6,-8,-10,-11,-12,-13,-14,-15,-15,-15,-16,-18,-18,-19,-20,-20,-20,-20,-20,-20,-20,-21,-21,-21,-21,-21,-21,-21,-21,-21,-21,-21,-21,-21,-22,-22,-22,-22,-22,-22,-22,-22,-22,-22,-24,-24,-24,-24,-22,-22,-22,-22,-22,-22,-23,-23,-23,-23,-23,-23,-23,-23,-23,-24,-24,-24,-24,-24,-24,-24,-24,-25,-23,-22,-22,-22,-24,-24,-24,-24,-24,-24,-24,-24,-22,-22,-22,-22,-22,-22,-21,-21,-21,-21,-21,-21,-21,-21,-21,-21,-23,-23,-23,-23,-21,-21,-21,-21,-21,-21,-21,-21,-21,-21,-21,-21,-19,-19,-19,-19,-20,-20,-19,-19,-21,-21,-21,-21,-21,-21,-20,-20,-22,-22,-21,-21,-20,-20,-20,-20,-20,-20,-20,-20,-20,-20,-20,-20,-20,-20,-20,-20,-20,-20,-20,-19,-19,-19,-19,-19,-18,-18,-18,-19,-17,-17,-16,-16,-17,-17,-17,-17,-17,-17,-16,-16,-16,-16,-16,-16,-18,-17,-17,-17,-17,-18,-18,-18,-17,-17,-17,-17,-17,-17,-17,-17,-17,-17,-18,-18,-15,-15,-16,-16,-16,-16,-16,-16,-16,-16,-16,-16,-16,-16,-16,-18,-17,-17,-17,-17,-17,-17,-16,-14,-13,-13,-13,-13,-13,-13,-13,-13,-13,-13,-13,-14,-14,-14,-13,-12,-12,-12,-12,-12,-12,-12,-12,-13,-13,-13,-11,-10,-9,-9,-9,-9,-9,-9,-9,-10,-11,-12,-13,-18,-22,-23,-25,-25,-25,-25,-25,-25,-24,-24,-24,-24,-24,-25,-25,-26,-26,-26,-26,-27,-27,-27,-27,-27,-27,-27,-27,-27,-27,-27,-27,-29,-29,-27,-28,-31,-31,-27,-23,-17,-5,12,31,50,68,83,89,87,81,72,61,52,41,26,7,-17,-35,-42,-44,-43,-41,-38,-35,-32,-30,-28,-23,-20,-20,-20,-21,-23,-21,-20,-20,-20,-20,-20,-19,-19,-19,-19,-19,-19,-19,-17,-17,-17,-16,-16,-15,-15,-15,-15,-15,-15,-15,-14,-14,-14,-14,-12,-12,-12,-12,-10,-10,-10,-10,-9,-9,-9,-9,-9,-9,-9,-8,-6,-6,-6,-6,-8,-7,-7,-7,-4,-4,-4,-4,-4,-4,-3,-3,-5,-4,-4,-4,-3,-3,-2,-2,-2,-1,-1,-1,0,2,2,2,5,5,7,7,7,7,9,10,9,10,10,11,12,13,14,16,17,18,18,20,19,20,22,24,25,26,27,28,27,29,30,31,32,32,33,33,33,33,33,34,34,34,32,31,30,29,28,27,24,22,20,18,18,15,11,10,6,4,3,2,2,0,-2,-3,-6,-7,-8,-9,-9,-9,-10,-12,-10,-11,-12,-12,-12,-12,-12,-12,-14,-15,-15,-15,-13,-13,-13,-13,-15,-15,-15,-15,-13,-13,-14,-14,-12,-12,-12,-12,-14,-14,-14,-14,-14,-14,-14,-14,-14,-14,-14,-14,-14,-14,-15,-15,-15,-15,-15,-15,-15,-15,-15,-16,-16,-16,-16,-16,-16,-16,-16,-17,-17,-16,-16,-16,-18,-18,-18,-18,-18,-18,-18,-18,-18,-18,-18,-18,-18,-18,-17,-17,-17,-17,-17,-17,-17,-17,-17,-17,-17,-17,-17,-17,-17,-17,-17,-17,-15,-15,-15,-15,-15,-15,-15,-15,-15,-15,-15,-15,-18,-18,-17,-17,-15,-15,-15,-15,-17,-17,-16,-16,-18,-18,-17,-17,-16,-16,-16,-16,-16,-16,-16,-16,-16,-16,-16,-16,-16,-16,-16,-16,-18,-18,-18,-17,-17,-17,-17,-17,-16,-16,-16,-17,-17,-17,-16,-16,-15,-15,-15,-15,-17,-17,-16,-16,-14,-14,-14,-14,-14,-13,-13,-13,-11,-12,-12,-12,-13,-13,-13,-13,-11,-11,-11,-11,-11,-11,-12,-12,-11,-11,-10,-12,-12,-12,-12,-12,-12,-12,-12,-12,-12,-12,-12,-12,-12,-12,-12,-12,-12,-12,-12,-12,-12,-12,-12,-11,-11,-11,-11,-9,-9,-8,-8,-5,-5,-5,-3,-5,-5,-5,-5,-5,-5,-5,-4,-4,-4,-3,-2,-2,-2,-2,-2,-2,-2,-2,-1,-1,-1,1,2,3,3,3,3,3,3,3,2,-1,-2,-3,-6,-8,-9,-11,-11,-13,-13,-13,-13,-12,-12,-12,-12,-12,-13,-13,-14,-14,-14,-14,-15,-13,-13,-13,-13,-13,-13,-13,-13,-13,-13,-13,-13,-15,-15,-16,-17,-17,-15,-11,-7,3,18,39,58,78,93,105,105,99,92,79,68,59,44,25,1,-23,-36,-38,-37,-35,-32,-29,-26,-22,-20,-17,-14,-12,-12,-13,-13,-13,-14,-14,-14,-14,-14,-13,-13,-13,-13,-13,-13,-13,-13,-13,-13,-12,-12,-11,-11,-11,-11,-11,-11,-11,-10,-10,-10,-10,-10,-10,-10,-10,-10,-10,-10,-10,-9,-9,-9,-9,-9,-9,-9,-8,-8,-8,-8,-8,-8,-7,-7,-7,-6,-6,-6,-6,-6,-6,-5,-5,-5,-4,-4,-4,-3,-3,-2,-2,-2,-1,-1,-1,0,2,2,2,1,1,3,3,3,3,5,6,7,8,8,9,12,13,14,16,15,16,16,18,21,22,24,26,27,28,29,30,29,31,32,33,34,34,35,35,37,37,37,38,38,38,36,35,36,35,34,33,30,28,26,24,20,17,13,12,12,10,9,8,6,4,2,1,0,-1,-2,-3,-5,-5,-6,-8,-8,-9,-10,-10,-8,-8,-8,-8,-10,-11,-11,-11,-9,-9,-9,-9,-9,-9,-9,-9,-9,-9,-10,-10,-10,-10,-10,-10,-10,-10,-10,-10,-10,-10,-10,-10,-10,-10,-10,-10,-10,-10,-11,-11,-11,-11,-11,-11,-11,-11,-11,-12,-10,-10,-10,-10,-12,-12,-12,-13,-13,-12,-12,-12,-12,-12,-12,-12,-12,-12,-12,-12,-10,-10,-10,-10,-12,-12,-11,-11,-11,-11,-11,-11,-11,-11,-11,-11,-9,-9,-9,-9,-9,-9,-9,-9,-9,-9,-9,-9,-9,-9,-9,-9,-11,-11,-11,-11,-12,-12,-11,-11,-11,-11,-11,-11,-11,-11,-10,-10,-10,-10,-9,-9,-10,-10,-10,-10,-10,-10,-10,-10,-10,-10,-10,-10,-10,-10,-10,-10,-10,-10,-10,-9,-9,-9,-9,-9,-10,-10,-10,-11,-11,-11,-10,-10,-11,-11,-11,-11,-11,-11,-10,-10,-10,-10,-10,-10,-10,-9,-9,-9,-9,-10,-10,-10,-9,-9,-9,-9,-9,-9,-9,-9,-7,-7,-8,-8,-9,-9,-8,-8,-8,-8,-8,-8,-8,-8,-8,-8,-8,-8,-8,-8,-8,-8,-8,-8,-8,-8,-8,-8,-8,-8,-8,-8,-8,-8,-8,-8,-8,-8,-8,-7,-7,-7,-7,-5,-5,-4,-4,-3,-3,-3,-1,-1,-1,-1,-1,-1,-1,-1,0,0,0,1,2,2,2,2,2,4,4,4,5,5,5,7,8,9,9,9,9,9,9,9,8,5,4,3,0,-2,-3,-5,-5,-7,-7,-7,-7,-4,-4,-4,-4,-4,-5,-5,-6,-6,-6,-6,-7,-7,-7,-7,-7,-7,-7,-7,-7,-7,-7,-7,-7,-9,-9,-10,-13,-9,-5,-1,9,21,40,59,76,94,109,113,111,101,88,77,68,55,34,5,-21,-35,-38,-34,-29,-25,-22,-19,-16,-14,-12,-9,-8,-8,-6,-7,-7,-5,-6,-6,-6,-6,-6,-5,-5,-5,-5,-5,-5,-5,-3,-3,-3,-2,-2,-1,-1,-1,-1,-1,-1,-1,0,0,0,0,0,0,0,0,2,2,2,2,1,1,1,1,1,1,1,2,4,4,4,4,4,5,5,5,4,4,4,4,4,4,5,5,7,8,8,8,7,7,8,8,8,9,9,9,10,12,12,12,11,11,13,13,15,15,17,18,19,20,20,21,22,23,24,26,27,28,28,30,31,32,34,36,37,38,39,40,41,43,44,45,44,44,45,45,45,45,45,46,46,46,44,43,42,41,40,39,34,32,30,28,28,25,21,20,16,14,13,12,12,10,8,7,6,5,4,3,3,3,2,0,2,1,0,0,0,0,0,0,0,-1,-1,-1,-3,-3,-3,-3,-1,-1,-1,-1,-3,-3,-4,-4,-4,-4,-4,-4,-2,-2,-2,-2,-4,-4,-4,-4,-4,-4,-4,-4,-4,-4,-5,-5,-5,-5,-5,-5,-3,-3,-3,-4,-4,-4,-4,-4,-4,-4,-4,-5,-5,-4,-4,-4,-4,-4,-4,-4,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-1,-1,-1,-1,-1,-1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,-2,-2,-1,-1,-1,-1,-1,-1,-1,-1,0,0,-2,-2,-1,-1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-2,-2,-2,-1,-1,-1,-1,-1,0,0,0,-1,-1,-1,0,0,-1,-1,-1,-1,-1,-1,0,0,0,0,0,0,-2,-1,-1,-1,1,0,0,0,1,1,1,1,1,1,1,1,2,0,0,0,0,0,0,1,1,3,3,3,3,4,4,5,5,5,7,7,7,7,7,7,7,7,8,8,8,9,10,10,10,10,10,10,10,10,11,11,11,13,14,15,15,15,15,15,15,15,14,13,12,11,8,4,3,3,3,3,3,3,3,4,4,4,4,4,3,3,2,2,2,2,1,1,1,1,1,1,1,1,1,1,1,1,-1,-1,-1,0,-1,-3,1,5,9,17,30,45,62,78,93,103,105,99,86,73,64,57,44,27,3,-17,-28,-30,-27,-23,-22,-19,-16,-12,-8,-7,-4,0,0,-1,-1,-1,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,2,2,3,3,3,3,3,3,3,4,4,4,4,4,4,4,4,4,4,4,4,5,5,5,5,5,5,5,6,6,6,6,6,4,5,5,5,6,6,6,6,6,6,7,7,7,8,8,8,7,7,8,8,10,11,11,11,10,12,12,12,13,13,15,15,15,15,17,18,19,20,20,21,22,23,24,26,27,28,28,30,31,32,34,36,37,38,39,40,39,41,42,43,44,44,45,45,47,47,47,48,46,46,44,43,42,41,40,39,36,34,32,30,28,25,21,20,18,16,15,14,12,10,8,7,6,5,4,3,3,3,2,0,2,1,0,0,-2,-2,-2,-2,-2,-3,-3,-3,-3,-3,-3,-3,-3,-3,-3,-3,-3,-3,-4,-4,-4,-4,-4,-4,-4,-4,-4,-4,-6,-6,-6,-6,-4,-4,-4,-4,-4,-4,-5,-5,-5,-5,-5,-5,-7,-7,-7,-8,-9,-10,-11,-12,-14,-14,-14,-15,-15,-14,-14,-14,-14,-14,-14,-14,-16,-16,-16,-16,-16,-16,-16,-16,-18,-18,-17,-17,-17,-17,-17,-17,-17,-17,-17,-17,-17,-17,-17,-17,-17,-17,-17,-17,-19,-19,-19,-19,-21,-21,-21,-21,-21,-21,-21,-21,-22,-22,-21,-21,-21,-21,-21,-21,-21,-21,-20,-20,-22,-22,-21,-21,-22,-22,-22,-22,-24,-24,-24,-24,-24,-24,-24,-24,-22,-22,-22,-22,-24,-24,-24,-23,-23,-23,-23,-23,-24,-24,-24,-25,-25,-25,-24,-24,-25,-25,-25,-25,-25,-25,-24,-24,-24,-24,-24,-24,-26,-25,-25,-25,-23,-24,-24,-24,-25,-25,-25,-25,-25,-25,-25,-25,-23,-23,-24,-24,-23,-23,-24,-24,-24,-24,-24,-24,-24,-24,-24,-24,-24,-24,-24,-24,-24,-24,-24,-26,-26,-25,-25,-23,-23,-23,-23,-22,-22,-21,-21,-21,-19,-19,-19,-19,-19,-19,-19,-19,-18,-18,-18,-17,-16,-16,-16,-16,-16,-16,-16,-14,-13,-13,-13,-13,-12,-11,-11,-11,-11,-11,-11,-13,-14,-15,-16,-17,-20,-24,-25,-27,-27,-27,-27,-27,-27,-26,-26,-26,-26,-26,-27,-27,-28,-28,-28,-28,-29,-29,-29,-29,-29,-29,-29,-27,-29,-29,-29,-29,-29,-29,-29,-30,-33,-35,-31,-27,-23,-13,4,21,40,56,73,83,83,79,72,59,48,37,22,5,-19,-39,-50,-52,-51,-49,-48,-45,-42,-38,-36,-31,-30,-30,-30,-31,-31,-31,-30,-30,-30,-30,-32,-31,-31,-31,-29,-29,-29,-29,-29,-29,-29,-28,-30,-29,-29,-29,-29,-29,-29,-29,-28,-28,-28,-28,-30,-30,-30,-30,-30,-30,-30,-30,-29,-29,-29,-29,-29,-29,-29,-28,-28,-28,-28,-28,-28,-27,-27,-27,-26,-26,-26,-26,-26,-26,-25,-25,-25,-24,-24,-24,-23,-23,-22,-22,-22,-21,-21,-21,-22,-20,-20,-20,-19,-19,-17,-17,-15,-15,-13,-12,-11,-10,-10,-9,-10,-9,-8,-6,-5,-4,-4,-2,-1,0,2,4,5,6,7,8,7,9,10,11,14,14,15,15,15,15,15,16,16,16,14,13,14,13,12,11,10,8,6,4,2,-1,-5,-6,-8,-10,-11,-12,-16,-18,-20,-21,-20,-21,-22,-23,-25,-25,-26,-28,-26,-27,-28,-28,-28,-28,-28,-28,-28,-29,-29,-29,-29,-29,-29,-29,-29,-29,-29,-29,-27,-27,-28,-28,-30,-30,-30,-30,-30,-30,-30,-30,-30,-30,-30,-30,-30,-30,-30,-30,-30,-30,-31,-31,-31,-31,-31,-31,-31,-31,-31,-32,-32,-32,-32,-32,-32,-32,-32,-33,-33,-32,-32,-32,-32,-32,-32,-32,-32,-32,-32,-32,-32,-32,-32,-32,-34,-34,-33,-33,-33,-33,-33,-33,-31,-31,-31,-31,-31,-31,-31,-31,-31,-31,-31,-31,-31,-31,-31,-31,-31,-31,-31,-31,-31,-31,-31,-31,-32,-32,-31,-31,-33,-33,-33,-33,-33,-33,-32,-32,-34,-34,-33,-33,-34,-34,-34,-34,-32,-32,-32,-32,-32,-32,-32,-32,-32,-32,-32,-32,-34,-34,-34,-33,-33,-33,-33,-33,-34,-34,-34,-35,-35,-35,-34,-34,-35,-35,-35,-35,-35,-35,-34,-34,-34,-34,-34,-34,-36,-35,-35,-35,-35,-36,-36,-36,-37,-37,-37,-37,-37,-37,-37,-37,-37,-37,-38,-38,-37,-37,-38,-38,-38,-38,-38,-38,-38,-38,-38,-38,-38,-38,-38,-38,-38,-38,-38,-38,-38,-38,-38,-38,-38,-38,-38,-38,-38,-38,-38,-38,-38,-38,-38,-38,-37,-37,-37,-37,-37,-37,-36,-36,-35,-35,-35,-33,-33,-33,-33,-33,-33,-33,-33,-32,-32,-32,-31,-30,-30,-30,-30,-30,-30,-30,-30,-29,-29,-29,-27,-26,-25,-25,-25,-25,-25,-25,-25,-26,-27,-28,-29,-32,-36,-37,-39,-39,-39,-39,-39,-39,-38,-38,-38,-38,-38,-39,-39,-40,-40,-40,-40,-41,-41,-41,-41,-41,-41,-41,-41,-41,-41,-41,-41,-41,-45,-43,-44,-45,-47,-45,-39,-33,-27,-12,5,22,42,59,73,77,75,70,57,44,35,22,3,-17,-41,-58,-64,-63,-63,-62,-59,-54,-50,-48,-45,-42,-42,-40,-41,-43,-41,-42,-42,-42,-42,-42,-41,-41,-41,-41,-41,-41,-41,-41,-41,-41,-40,-40,-39,-39,-39,-39,-39,-39,-39,-38,-38,-38,-38,-36,-36,-36,-36,-36,-36,-36,-36,-37,-37,-37,-37,-37,-37,-37,-36,-36,-36,-36,-36,-36,-35,-35,-35,-34,-34,-34,-34,-32,-32,-31,-31,-33,-32,-32,-32,-29,-29,-28,-28,-30,-29,-29,-29,-28,-26,-26,-26,-25,-25,-23,-23,-23,-23,-21,-20,-19,-18,-18,-17,-16,-15,-14,-12,-9,-8,-8,-6,-5,-4,-2,0,-1,0,1,2,5,7,8,9,10,10,11,11,11,11,11,12,13,14,13,13,12,11,10,9,8,6,4,2,0,-3,-7,-8,-10,-12,-13,-14,-16,-18,-20,-21,-22,-23,-24,-25,-27,-27,-28,-30,-28,-29,-30,-30,-32,-32,-32,-32,-30,-31,-31,-31,-31,-31,-31,-31,-31,-31,-31,-31,-29,-29,-30,-30,-28,-28,-28,-28,-28,-28,-28,-28,-28,-28,-28,-28,-28,-28,-28,-28,-28,-28,-29,-29,-29,-29,-29,-29,-29,-29,-29,-30,-28,-28,-28,-28,-28,-28,-28,-29,-29,-28,-28,-28,-28,-28,-28,-28,-28,-28,-28,-28,-28,-28,-28,-28,-28,-28,-27,-27,-27,-27,-27,-27,-27,-27,-27,-27,-25,-25,-25,-25,-27,-27,-27,-27,-25,-25,-25,-25,-25,-25,-25,-25,-25,-25,-25,-25,-26,-26,-25,-25,-27,-27,-27,-27,-27,-27,-26,-26,-26,-26,-25,-25,-26,-26,-26,-26,-26,-26,-26,-26,-26,-26,-26,-26,-26,-26,-26,-26,-26,-26,-26,-25,-27,-27,-27,-27,-26,-26,-26,-27,-27,-27,-26,-26,-27,-27,-27,-27,-27,-27,-26,-26,-26,-26,-26,-26,-28,-27,-27,-27,-27,-28,-28,-28,-27,-27,-27,-27,-27,-27,-27,-27,-25,-25,-26,-26,-27,-27,-28,-28,-28,-28,-28,-28,-28,-28,-28,-28,-28,-28,-28,-28,-28,-28,-28,-28,-28,-28,-28,-28,-28,-28,-28,-28,-27,-27,-27,-27,-27,-27,-26,-26,-25,-25,-25,-23,-23,-23,-23,-23,-23,-23,-23,-22,-22,-22,-21,-20,-20,-20,-20,-20,-20,-20,-20,-19,-19,-19,-17,-16,-15,-15,-15,-15,-15,-15,-15,-16,-17,-18,-19,-22,-26,-27,-29,-29,-29,-29,-29,-29,-28,-28,-28,-28,-28,-29,-29,-30,-30,-30,-30,-31,-31,-31,-31,-31,-31,-31,-31,-31,-31,-31,-31,-31,-33,-33,-34,-35,-35,-31,-27,-23,-13,4,21,42,58,75,87,89,83,72,59,50,41,24,3,-23,-47,-60,-62,-57,-53,-52,-49,-44,-42,-40,-37,-34,-30,-32,-31,-31,-31,-30,-30,-30,-30,-30,-29,-29,-29,-29,-29,-29,-29,-29,-29,-29,-28,-28,-27,-27,-27,-27,-27,-27,-27,-26,-26,-26,-26,-26,-26,-26,-26,-24,-24,-24,-24,-25,-25,-25,-25,-23,-23,-23,-22,-22,-22,-22,-22,-24,-23,-23,-23,-22,-22,-22,-22,-22,-22,-21,-21,-21,-20,-20,-20,-19,-19,-18,-18,-16,-15,-15,-15,-16,-14,-14,-14,-15,-15,-13,-13,-13,-13,-11,-10,-9,-8,-8,-7,-4,-3,-2,0,1,2,2,4,5,6,8,10,9,10,11,12,15,17,18,19,18,18,19,19,19,19,19,20,20,20,18,17,16,15,14,13,10,8,6,4,2,-1,-5,-6,-8,-10,-11,-12,-14,-16,-18,-19,-20,-21,-22,-23,-23,-23,-24,-26,-26,-27,-28,-28,-30,-30,-30,-30,-28,-29,-29,-29,-29,-29,-29,-29,-31,-31,-31,-31,-31,-31,-32,-32,-32,-32,-32,-32,-34,-34,-34,-34,-32,-32,-32,-32,-34,-34,-34,-34,-34,-34,-35,-35,-35,-35,-35,-35,-35,-35,-35,-36,-36,-36,-36,-36,-34,-34,-34,-35,-35,-34,-34,-34,-34,-34,-34,-34,-36,-36,-36,-36,-34,-34,-34,-34,-34,-34,-33,-33,-35,-35,-35,-35,-35,-35,-35,-35,-37,-37,-37,-37,-35,-35,-35,-35,-37,-37,-37,-37,-37,-37,-37,-37,-37,-37,-37,-37,-38,-38,-37,-37,-39,-39,-39,-39,-37,-37,-36,-36,-38,-38,-37,-37,-40,-40,-40,-40,-38,-38,-38,-38,-38,-38,-38,-38,-40,-40,-40,-40,-40,-40,-40,-39,-39,-39,-39,-39,-40,-40,-40,-41,-41,-41,-40,-40,-41,-41,-41,-41,-41,-41,-40,-40,-42,-42,-42,-42,-42,-41,-41,-41,-41,-42,-42,-42,-43,-43,-43,-43,-41,-41,-42,-42,-42,-42,-42,-44,-44,-43,-43,-43,-43,-43,-43,-42,-42,-41,-41,-41,-39,-39,-39,-39,-39,-39,-39,-37,-36,-36,-36,-35,-34,-34,-34,-36,-36,-36,-36,-36,-35,-35,-35,-35,-34,-33,-33,-33,-33,-33,-33,-33,-34,-35,-36,-39,-42,-46,-47,-47,-47,-47,-47,-47,-47,-46,-46,-46,-46,-46,-47,-47,-48,-48,-48,-50,-51,-51,-51,-49,-49,-49,-49,-49,-49,-51,-51,-51,-53,-51,-49,-52,-53,-53,-51,-49,-45,-35,-20,-3,14,30,41,51,51,43,30,19,10,1,-14,-33,-55,-73,-84,-84,-81,-77,-76,-73,-70,-68,-64,-61,-56,-54,-56,-55,-55,-57,-56,-56,-56,-56,-56,-55,-55,-55,-55,-55,-55,-55,-55,-55,-55,-54,-54,-53,-53,-53,-53,-53,-53,-53,-52,-52,-52,-52,-52,-52,-52,-52,-50,-50,-50,-50,-51,-51,-51,-51,-51,-51,-51,-50,-50,-50,-50,-50,-50]


lead1 = pd.DataFrame(lead1)

def no(result_c):
    sum_c = 0
    count_c = 0 
    for i in range(len(result_c)-1):
        sum_c += result_c[i+1] - result_c[i] 
    
    if len(result_c) ==1:
        sum_c = sum_c
    else:
        sum_c = sum_c//(len(result_c)-1)
    
    if result_c[0] - sum_c*0.5 <= 0: 
        result_c=np.delete(result_c, [0]) 
        count_c += 1 
        
    if result_c[len(result_c)-1] +sum_c*0.5 >=5000: 
        result_c=np.delete(result_c, [len(result_c)-1])
        count_c += 1
        
    return count_c, result_c


def box(x):
    
    result = peakutils.indexes(x, thres=0.7, min_dist=200)
    nono, result = no(result)
    sub, tot = [], []
    for i in range(len(result)-1):
        sub.append(result[i+1]-result[i])
    avg = np.average(sub)//2
    for i in range(len(result)):
        if result[i]-avg < 0:
            tot.append([0, int(result[i]+avg)])
        elif result[i]+avg > len(x):
            tot.append([int(result[i]-avg), len(x)])
        else:
            tot.append([int(result[i]-avg), int(result[i]+avg)])

    return tot, result

def draw(x, peak_num, a, r, second, third, end, name, num_id):
    if r-len(x)/4<0:
        return 0, 0
    elif r+len(x)*3/4>4998:
        return 0, 0
    else:
        peak_set = find_peak(x, r, second, third, end,a, num_id)
        if peak_set == 0:
            return 0, 0
        else:
            plt.plot(x, 'k')
            plt.xticks(np.arange(r-len(x)//2+1, r+len(x)//2, step=(r-a)//2))
            plt.axvline(x = second, color='lightgray', linewidth=1)
            plt.axvline(r, color='lightgray', linewidth=1.5)
            plt.axvline(x = third, color='lightgray', linewidth=1)
            if not peak_set[0]:
                print('P파 없음.')
            else:
                plt.axhline(y = x[peak_set[0]], color='r', linewidth=1, label='P')
            plt.axhline(y = x[peak_set[1]], color='b', linewidth=1, label='Q')
            plt.axhline(y= x[peak_set[3]], color='g', linewidth=1, label='S')
            plt.axhline(y = x[peak_set[4]], color='c', linewidth=1, label='T')
            plt.legend(loc='upper right')
            plt.title(name + '\'s ' + str(peak_num)+' Peak')
            peak_num+=1
            return peak_num, peak_set
        

def find_peak(x, r, second, third, end, a, num_id):
    p, q, s, t= [], [], [], []
    
    for i in range(r-1, a, -1):
        if x[i] - x[i-1] < 0:
            if x[i] + 10 > x[r]:
                continue
            else:
                q.append(i)
        if q:
            break
            
    if not q:
        for i in range(r-1, a, -1):
            if x[i] - x[i-1] == 0:
                q.append(i)    
            if q:
                break               
                
    q_idx = q

                
    for i in range(q[0]-1, a, -1):
        if x[i] - x[i-1] > 0:
            p.append(i)
                
    pp_idx = []
    p_idx = x[x == np.max(x[p])]
    p_idx = p_idx.index.values
    for i in range(len(p_idx)):
        if p_idx[i] < q:
            pp_idx.append(p_idx[i])
    p_idx = pp_idx[-1]        
             
    for i in range(r, third+1):
        if x[i] - x[i+1] < 0:
            if x[i] + 10 > x[r]:
                continue
            else:
                s.append(i)  
        if s:
            break
    s_idx = s      
    if not s:
        return 0, 0, 0
    
    
    for i in range(s[0], end):
        if x[i] - x[i+1] > 0:
            t.append(i)  
            

    t_idx = x[x == np.max(x[t])]
    t_idx = t_idx[:1].index.values            

    
    peak_set = [p_idx, q_idx[0], r, s_idx[0], t_idx[0], num_id]

    
    return peak_set

def calculatePac():
    all_peak_all = []
    for i in range(len(lead1.columns)):
        tmp = lead1[i]
        total, result = box(tmp)
        num, peak_num=0, 1
        name=str(i+1)+'Person'
        for a, b in total:
            x = []
            x = tmp[a:b]
            r = result[num]
            second = (r+a)//2
            third = (r+len(x)//4)
            end = x.last_valid_index()
            
            if peak_num == 2:
                now = datetime.now()
                number = now.isoformat()[2:4]+ now.isoformat()[5:7] + now.isoformat()[8:10] + now.isoformat()[11:13] + now.isoformat()[14:16] + now.isoformat()[17:19]
                my_path = os.path.abspath('/Users/Pc/vsc/Backend-Flask/static/tmp_images')
                my_file = 'graph' + str(number)+'.png'
                s3 = boto3.client('s3')

                plt.savefig(os.path.join(my_path, my_file), dpi=80)
                s3.upload_file('C:/Users/Pc/vsc/Backend-Flask/static/tmp_images/graph'+ str(number) +'.png', bucket_name, my_file)
                os.remove('C:/Users/Pc/vsc/Backend-Flask/static/tmp_images/graph'+ str(number) +'.png')
                image_url = 'https://capstone-heartbeat-s3.s3.ap-northeast-2.amazonaws.com/graph'+ str(number) +'.png'

            peak_num, peak_set = draw(x, peak_num, a, r, second, third, end, str(i+1), i)
            if peak_set == 0 and peak_num == 0:
                if peak_num == 0:
                    peak_num = 1
            else:
                all_peak_all.append(peak_set)
                if peak_num == 0:
                    peak_num = 1
            num+=1
    
    all_peak_all = pd.DataFrame(all_peak_all, columns = ['P', 'Q', 'R', 'S', 'T', 'id'])

    all_peak_all = all_peak_all.values.tolist()

    R_peak = [[] for _ in range(50)]
    j=0
    for i in all_peak_all:
        if j == i[5]:
            R_peak[j].append(i[2])
        else: 
            j+= 1

    inter = [[] for _ in range(len(R_peak))]
    sum = 0
    RRI_avg = []*(len(R_peak))
    for i in range(len(R_peak)):
        for k in range(1,len(R_peak[i])):
            inter[i].append(R_peak[i][k]-R_peak[i][k-1])
            sum += R_peak[i][k]-R_peak[i][k-1]
        RRI_avg.append(sum // (len(R_peak[i])-1))
        sum=0

    pac = []
    count_pac = 0
    for i in range(len(inter)):
        for k in range(len(inter[i])):
            if (inter[i][k]-RRI_avg[i] < 0) and (abs(inter[i][k]-RRI_avg[i]) >= RRI_avg[i]*0.3):
                count_pac += 1
        pac.append(count_pac)
        count_pac = 0


    num = 0
    for k in range(len(all_peak_all)):
        if all_peak_all[k][5] == num: 
            all_peak_all[k].append(pac[num])
        else:
            num += 1

    all_peak_all = pd.DataFrame(all_peak_all, columns = ['P', 'Q', 'R', 'S', 'T', 'id','pac (T or F)'])


    all_peak_all = all_peak_all.values.tolist()


    pac_c = []
    count_pac = 0
    for i in range(len(inter)):
        for k in range(len(inter[i])):
            if (inter[i][k]-RRI_avg[i] < 0):
                count_pac += 1
        pac_c.append(count_pac)
        count_pac = 0


    num = 0
    for k in range(len(all_peak_all)):
        if all_peak_all[k][5] == num: 
            all_peak_all[k].append(pac_c[num])
        else:
            num += 1

    result = True;
    for i in range(len(all_peak_all)):
        if all_peak_all[i][6] != 0:
            result = True
            break
        elif all_peak_all[i][6] == 0 and i == len(all_peak_all)-1:
            result = False
            break
    
    return image_url, result